#!/bin/sh

set -e

dashless=$(basename "$0" | sed -e 's/-/ /')
USAGE="init
   or: $dashless deinit
   or: $dashless submodule-update <submodule>
   or: $dashless submodule-add <repo>
   or: $dashless clone <repo>"
SUBDIRECTORY_OK=yes
NONGIT_OK=yes

if ! type git-sh-setup > /dev/null 2>&1
then
    PATH="$(git --exec-path):$PATH"
fi

. git-sh-setup

root=${GIT_UNIFY_ROOT-$(git config unify.root || true)}
if [ -z "$root" ]
then
    root="$HOME/.shared-git"
fi

__remote_url_to_dir () {
    url=$1

    case "$url" in
    ./*|../*)
        die "Cannot unify relative repository URL: $url"
    esac

    dir=$url
    dir=${dir#*@}
    dir=${dir#*://}
    dir=${dir%.git}
    dir=${dir/:/\/}
    dir=${dir/\/\//\/}
    dir=${dir#/}
    echo "$root/$dir"
}

# Unify current non-unified git-dir
cmd_init () {
    local_git_dir=$(git rev-parse --git-dir) || exit

    if [ -L "$local_git_dir/config" ]
    then
        die "$local_git_dir/config is already a symbolic link to $(readlink "$local_git_dir/config") (maybe already unified)"
    fi

    remote_url=$(git config remote.origin.url || die 'fatal: remote.origin.url not set')
    shared_git_dir=$(__remote_url_to_dir "$remote_url")

    say "Preparing shared git-dir for <$remote_url>..."

    if [ -d "$shared_git_dir" ]
    then
        say "Shared git-dir exists. Comparing heads..."

        # Syncing two repositories automatically is a hard job, so we don't try on it
        heads_shared="${TMPDIR-/tmp}/git-unify.$$.heads-shared"
        heads_local="${TMPDIR-/tmp}/git-unify.$$.heads-local"

        if ! ( git ls-remote --heads "$shared_git_dir" >"$heads_shared";
               git ls-remote --heads . >"$heads_local";
               diff -u "$heads_shared" "$heads_local" )
        then
            rm $heads_shared $heads_local
            die 'fatal: Heads are not synced. Please sync manually branches and try again.
    Typically running `git fetch --update-head-ok "$(git unify shared-dir)" refs/heads/*:refs/heads/*`
    and pull/pushing conflicting branch will fix.'
        fi

        rm $heads_shared $heads_local

        say "Removing files under $local_git_dir and replacing with symlinks to $shared_git_dir..."

        for x in config refs logs/refs objects info hooks packed-refs remotes rr-cache svn
        do
            rm -rf "$local_git_dir/$x"

            if [ -e "$shared_git_dir/$x" ]
            then
                ln -s "$shared_git_dir/$x" "$local_git_dir/$x"
            fi
        done
    else
        mkdir -p "$shared_git_dir"

        say "Moving $local_git_dir to $shared_git_dir..."

        __split_config_entries core.bare core.worktree

        for x in config refs logs/refs objects info hooks packed-refs remotes rr-cache svn
        do
            if [ -e "$local_git_dir/$x" ]
            then
                case $x in
                    */*)
                        mkdir -p "$(dirname "$shared_git_dir/$x")"
                        ;;
                esac
                mv "$local_git_dir/$x" "$shared_git_dir/$x"
                ln -s "$shared_git_dir/$x" "$local_git_dir/$x"
            fi
        done

        (
            GIT_DIR="$shared_git_dir" git init --bare
            GIT_DIR="$shared_git_dir" __split_config_entries core.bare core.worktree
        )
    fi
}

cmd_submodule_add () {
    cd_to_toplevel

    remote_url=$1
    submodule_name=${2-$(basename ${remote_url%.git})}

    shared_git_dir=$(__remote_url_to_dir "$remote_url")

    if [ -d "$shared_git_dir" ]
    then
        say "Shared git-dir for <$remote_url> exists"

        git submodule add --reference "$shared_git_dir" "$remote_url" "$submodule_name"
    else
        git submodule add "$remote_url" "$submodule_name"
    fi

    ( cd "$submodule_name" && cmd_init )
}

cmd_submodule_update () {
    cd_to_toplevel

    if [ $# -ge 1 ]; then
        submodule_update_target "$@"
    else
        # XXX use `-z`
        git ls-files --stage | while read mode sha1 stage path
        do
            if [ "$mode" == "160000" ]
            then
                submodule_update_target "$path" || true
            fi
        done
    fi
}

submodule_update_target () {
    cd_to_toplevel

    submodule_name=${1%/}

    test -n "$submodule_name"

    remote_url=$(git config -f .gitmodules "submodule.${submodule_name}.url")
    shared_git_dir=$(__remote_url_to_dir "$remote_url")

    if [ -d "$shared_git_dir" ]
    then
        say "Shared git-dir for <$remote_url> exists"

        # First clone using the shared git-dir
        git submodule update --init --reference "$shared_git_dir" "$submodule_name"
    else
        git submodule update --init "$submodule_name"
    fi

    ( cd "$submodule_name" && cmd_init )
}

cmd_clone () {
    remote_url=$1
    directory=${2-$(basename ${remote_url%.git})}
    shared_git_dir=$(__remote_url_to_dir $remote_url)

    if [ -d "$shared_git_dir" ]
    then
        say "Found shared git-dir; clone via $shared_git_dir..."

        git clone --reference $shared_git_dir $remote_url $directory
    else
        say "Shared git-dir not found"

        git clone $remote_url $directory
    fi

    ( cd $directory && cmd_init )
}

cmd_deinit () {
    local_git_dir=$(git rev-parse --git-dir) || exit

    if [ ! -L "$local_git_dir/config" ]
    then
        die "$local_git_dir/config is not a symbolic link; cannot deinit (not unified?)"
    fi

    remote_url=$(git config remote.origin.url || die 'fatal: remote.origin.url not set')
    shared_git_dir=$(__remote_url_to_dir $remote_url)

    if [ ! -d "$shared_git_dir" ]
    then
        die "$shared_git_dir is not a directory"
    fi

    say "Reverting symlinks..."

    for x in config refs logs/refs objects info hooks packed-refs remotes rr-cache svn
    do
        if [ -L "$local_git_dir/$x" ]
        then
            target=$(readlink $local_git_dir/$x)
            rm -f $local_git_dir/$x
            cp -r $target $local_git_dir/$x
        fi
    done
}

cmd_shared_dir () {
    remote_url=$(git config remote.origin.url || die 'fatal: remote.origin.url not set')
    echo $(__remote_url_to_dir "$remote_url")
}

__split_config_entries () {
    file=$(git rev-parse --git-dir)/config.local
    while test $# != 0
    do
        local key=$1
        shift

        # XXX use `-z`?
        for value in $(git config --local --no-includes $key)
        do
            git config --file "$file" $key $value
            git config --unset $key
        done
    done

    git config --local include.path config.local
}

while test $# != 0 && test -z "$command"
do
    case "$1" in
        init | deinit | clone | submodule-update | submodule-add | shared-dir )
            command=$1
            ;;
        --)
            break
            ;;
        -*)
            usage
            ;;
        *)
            break
            ;;
    esac
    shift
done

# No command word defaults to "status"
if test -z "$command"
then
    usage
fi

"cmd_${command//-/_}" "$@"
